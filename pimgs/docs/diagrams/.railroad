https://www.bottlecaps.de/rr/ui

createTableDef
::= 'CREATE' 'TABLE' ('IF' 'NOT' 'EXISTS')? tableName
  (
  (
  '(' columnName typeDef (',' columnName typeDef)* ')'
  ) | (
  'AS' '(' selectSql ')'  (',' castDef)* (',' indexDef)*
  )
  ) (
  ('timestamp' '(' columnRef ')' ) ('PARTITION' 'BY' ('NONE' | 'YEAR' | 'MONTH' | 'DAY' | 'HOUR' ))?
  )? (
  'WAL' | 'BYPASS' 'WAL')?
 ('WITH' tableParameter)?
 (tableTargetVolumeDef)?

createTableLike
::= 'CREATE' 'TABLE' ( '(' 'LIKE' sourceTableName ')' )? ';'

alterTable 
  ::= 'ALTER' 'TABLE' tableName

dropTable
  ::= 'DROP' 'TABLE' tableName ('IF' 'EXISTS')? ';'

castDef
  ::= 'cast' '(' columnRef 'as' typeDef ')'

inlineIndexDef 
  ::= 'INDEX' (indexCapacityDef)?

typeDef 
  ::= (
  'boolean' | 'byte' | 'short' | 'char' | 'int' | 'float' |
  ('symbol' (('CAPACITY' distinctValueEstimate) ('CACHE' | 'NOCACHE')?)? inlineIndexDef?) |
  'string' | 'long' | 'date' | 'timestamp' | 'double' | 'binary' | 'long256' | 'geohash(<size>)'
  )

indexDef 
  ::='INDEX' '(' columnRef ('CAPACITY' valueBlockSize)?')'

tableTargetVolumeDef

::= ','? 'IN' 'VOLUME' "'"? secondaryVolumeAlias "'"?

insertInto
  ::= 'INSERT' ('batch' batchCount)?
  'INTO' tableName ( ( '(' columnName (',' columnName)*) ')')?
  ( 'VALUES' ( ( '(' value ( ',' value)* ')' ) (',' '(' value ( ',' value)* ')' )* ) | 'SELECT' queryDef mainQuery )
  ';'

withAsInsert
  ::= ( 'WITH' subQueryName 'AS' '(' subQuery ')' ( ',' subQueryName 'AS' '(' subQuery ')' )* )? 
  'INSERT' ( 'batch' batchCount )? 'INTO' tableName 'SELECT' queryDef subQueryName ';'

insertCommitLagInto
  ::= 'INSERT' ('batch' batchCount 'commitLag' n ( 'us' | 's' | 'm' | 'h' | 'd' ))?
  'INTO' tableName ( ( '(' columnName (',' columnName)*) ')')?
  ( 'VALUES' ( ( '(' value ( ',' value)* ')' ) (',' '(' value ( ',' value)* ')' )* ) | 'SELECT' queryDef mainQuery )
  ';'

withAsInsertCommitLag
  ::= ( 'WITH' subQueryName 'AS' '(' subQuery ')' ( ',' subQueryName 'AS' '(' subQuery ')' )* )? 
  'INSERT' ( 'batch' batchCount 'commitLag' n ( 'us' | 's' | 'm' | 'h' | 'd' ) )? 'INTO' tableName 'SELECT' queryDef subQueryName ';'

Backup
  ::= 'BACKUP' ( 'TABLE' tableName ( ',' tableName )* | 'DATABASE' ) ';'
Snapshot
  ::= 'SNAPSHOT' ( 'PREPARE' | 'COMPLETE' ) ';'

case
  ::= 'CASE' ('WHEN' condition 'THEN' value)* ( | 'ELSE' value ) 'END'

Copy
  ::= 'COPY' (id 'CANCEL' | tableName 'FROM' fileName (| 'WITH' (| 'HEADER' (true|false) |'TIMESTAMP' columnName | 'DELIMITER' delimiter | 'FORMAT' format | |'PARTITION BY' ('NONE'|'YEAR'|'MONTH'|'DAY'|'HOUR') | 'ON ERROR' ('SKIP_ROW'|'SKIP_COLUMN'|'ABORT')) ))


CreateTableTimestamp
  ::= 'CREATE' someCreateTableStatement 'timestamp' '(' columnName ')'


createTableWithCommitParams
  ::= 'WITH' 'maxUncommittedRows' '=' rowCount ',' 'commitLag' '=' n ( 'us' | 's' | 'm' | 'h' | 'd' )
createTableWithMaxRowParams
  ::= 'WITH' 'maxUncommittedRows' '=' rowCount

dynamicTimestamp
  ::= 'SELECT' someSelectStatement 'timestamp' '(' columnName ')'

sampleBy 
  ::= someSelectStatement... 'SAMPLE' 'BY' n ( 'T' | 's' | 'm' | 'h' | 'd' | 'M' | )

alignToCalTimeZone
  ::= 'ALIGN' 'TO' ( 'FIRST' 'OBSERVATION' | 'CALENDAR' ( 'TIME' 'ZONE' timezone | 'WITH' 'OFFSET' offset )? )


distinct
  ::= 'SELECT' 'DISTINCT' ( columnName (',' columnName)* ) 'FROM' tableName

latestBy
  ::= 'SELECT' ( columnName (',' columnName)* ) 'FROM' tableName 'LATEST' 'ON' '(' columnName ')' 'PARTITION' 'BY' ( columnName (',' columnName)* )

latestByDeprecated
  ::= 'SELECT' ( columnName (',' columnName)* ) 'FROM' tableName 'LATEST' 'BY' ( columnName (',' columnName)* )

limit
  ::= 'SELECT' someSelectStatement 'LIMIT' ( numberOfRecords | (lowerBound ',' upperBound) ) ';'

fill
  ::= someSampleBySelectQuery 'FILL' ( ( 'NONE' | 'NULL' | 'PREV' | 'LINEAR' | 'x' ) ',' )*

orderBy
  ::= someSelectQuery 'ORDER' 'BY' ( columnName (ASC | DESC) ? (',' columnName (asc | desc) ?)* )

timestampSearch
  ::= 'WHERE' timestampColumn ( '=' | '>' | '<' | '>=' | '<=' ) "'" timestamp "'"

timestampIntervalSearch
  ::= 'WHERE' timestampColumn 'IN' "'" timestamp ';' multiplier ( s | m | h | d | M | y ) ';' ( occurrence ( s | m | h | d | M | y ) ';' repetition )? "'"

timestampInSearch
  ::= 'WHERE' timestampColumn 'IN' '(' "'timestamp1'" ';' "'timestamp2'" ')'

exactStringOrSymbolSearch
  ::= 'WHERE' column '=' "'" string "'"

regexMatch
  ::= 'WHERE' '~=' '(' column ';' regex ')'

listMatch
  ::= 'WHERE' 'NOT'? columnName 'in' '(' string (',' string)* ')'

whereNumericValue
  ::= 'WHERE' column ('=' | '!=' | '>' | '>=' | '<' | '<=') value

whereEqDoubleProximityPrecision
  ::= 'WHERE' 'eq' '(' column ',' value ',' precision  ')'

complexWhere
  ::= 'WHERE' ('('? ( 'AND' | 'OR' | 'NOT' )? boolean ')'?)*

booleanWhere
  ::= 'WHERE' 'NOT'? columnName

timestampExact
  ::= 'WHERE' column '=' timestamp

timestampPartial
  ::= 'WHERE' timestampColumn 'IN' ( 'yyyy' | 'yyyy-MM' | 'YYYY-MM-dd' | 'yyyy-MM-ddThh' | 'yyyy-MM-ddThh:mm' | 'yyyy-MM-ddThh:mm:ss' )

timestampExplicitRange
  ::= 'WHERE' timestamp 'IN' '(' lower_bound ',' upper_bound ')'

union
  ::= selectStatement ('UNION' 'ALL'? otherSelectStatement)*

renameTable
  ::= 'RENAME' 'TABLE' oldName 'TO' newName

cast
  ::= 'CAST' '(' expression 'AS' type ')'

InfluxLineProtocolOverTCP
  ::= (user_1 | user_2 | '...') 'TCP requests' network_IO_thread 'write_queue' ((worker_1 'write' (table_1|table_2|'...')) | (worker_2 'write' (table_3|table_4|'...')))

InfluxLineProtocolOverTCPLoadRebalance
  ::= Launch_Load_Balancing_Job  ('IF' load_ratio '>' 'max.load.ratio' Rebalance_Load)? ( 'IF' (updates_since_last_rebalance '<' 'n.updates.per.load.balance' | time_since_last_rebalance '<' 'maintenance.job.interval') Launch_Load_Balancing_Job ('IF' load_ratio '>' 'max.load.ratio' Rebalance_Load)?  )*

JoinOverview:
  ::= selectClause joinStatement ( 'WHERE' whereClause )?

InnerLeftJoin

::= ( 'INNER' | 'LEFT' )? 'JOIN' ( table | '(' sub-query ')' ) ( 'ON' ( ( column operator anotherColumn ) ( 'AND' ( column operator anotherColumn ) )* | '(' column ( ',' column )* ')' ) )?

AasofLtSpliceJoin

  ::= ( 'ASOF' | 'LT' | 'SPLICE' ) 'JOIN' ( table | '(' sub-query ')' ) ( 'ON' ( column '=' anotherColumn ( 'AND' column '=' anotherColumn )* | '(' column ( ',' column )* ')' ) )?

CrossJoin

::= 'CROSS' 'JOIN' ( table | '(' sub-query ')' )

groupBy
  ::= 'SELECT' ((column ( ',' column )* ) ' ,' ( aggregation ( ',' aggregation )* )) 'FROM' table ('GROUP BY' (column ( ',' column )* ))?

with
  ::= 'WITH' ( subQueryName 'AS' '(' subQuery ')' ( ',' subQueryName 'AS' '(' subQuery ')' )*) mainQuery

addIndex
 ::= 'ALTER' 'COLUMN' columnName 'ADD' 'INDEX'

dropIndex
    ::= 'ALTER' 'TABLE' tableName 'ALTER' 'COLUMN' columnName 'DROP' 'INDEX'

(no)cachColumn
 ::= 'ALTER' 'TABLE' tableName 'ALTER' 'COLUMN' columnName ( 'NOCACHE' | 'CACHE' )

dropColumn
 ::= 'DROP' 'COLUMN' columnName (',' columnName)*

addColumn
 ::= 'ADD' 'COLUMN' columnName typeDef (',' columnName typeDef)*

dropPartition
 ::= 'DROP' 'PARTITION' 'LIST' partitionName (',' partitionName)*

reindexTable
  ::= 'REINDEX' 'TABLE' tableName ('COLUMN' columnName)* ('PARTITION' partitionName)* 'LOCK' 'EXCLUSIVE'

renameColumn
  ::= 'RENAME' 'COLUMN' columnName 'TO' newColumnName

attachPartition
 ::= 'ALTER' 'TABLE' tableName 'ATTACH' 'PARTITION' 'LIST' partitionName (',' partitionName)*

detachPartition
 ::= 'ALTER' 'TABLE' tableName 'DETACH' 'PARTITION' 'LIST' partitionName (',' partitionName)*
   | 'ALTER' 'TABLE' tableName 'DETACH' 'PARTITION' 'WHERE' timestampColumn ( '=' | '>' | '<' | '>=' | '<=' ) "'" timestamp "'"
   | 'ALTER' 'TABLE' tableName 'DETACH' 'PARTITION' 'WHERE' timestampColumn 'IN' '(' timestamp (',' timestamp)* ')'

setParam
 ::= 'SET' 'PARAM' ( 'maxUncommittedRows' '=' n)

setParamCommitLag
 ::= 'SET' 'PARAM' ( 'maxUncommittedRows' '=' n | 'commitLag' '=' n ( 'us' | 's' | 'm' | 'h' | 'd' ))

VacuumTable
 ::= 'VACUUM' 'TABLE' tableName

ResumeWal
::= 'RESUME' 'WAL' ( 'FROM' 'TRANSACTION' sequencerTxn | 'FROM' 'TXN' sequencerTxn )?

SetType
::= 'SET' 'TYPE' ( 'BYPASS' )? 'WAL'

Update
 ::= UPDATE 'tableName' SET columnName '=' 'expression' ( ',' columnName '=' 'expression' )*
(FROM 'joinTable1' (JOIN 'joinTable2' ON 'joinCondition2')? )? (WHERE 'filter')?

TruncateTable
::= 'TRUNCATE TABLE' tableName

Explain
::= 'EXPLAIN' statement 

analyticFunction
::= functionName 'OVER' '(' ( 'PARTITION' 'BY' ( columnName? (',' columnName?)* ))?  ('ORDER' 'BY' ( columnName (ASC | DESC) ? (',' columnName (ASC | DESC) ?)* ))? ')'
